// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TelegramInjectionBot.Data;

#nullable disable

namespace TelegramInjectionBot.Migrations
{
    [DbContext(typeof(EFContext))]
    partial class EFContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8mb4_general_ci")
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8mb4");

            modelBuilder.Entity("RoleHasPermission", b =>
                {
                    b.Property<ulong>("PermissionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("permission_id");

                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("role_id");

                    b.HasKey("PermissionId", "RoleId")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "RoleId" }, "role_has_permissions_role_id_foreign");

                    b.ToTable("role_has_permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.AutoCommand", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("auto_commands", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Bot", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<string>("Country")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country")
                        .HasComment("Название страны устройства.");

                    b.Property<string>("CountryCode")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("country_code")
                        .HasComment("Код страны устройства.");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("CurrentFileManagerPath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("current_file_manager_path");

                    b.Property<string>("Ip")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("ip")
                        .HasComment("ip адрес устройства. С портом");

                    b.Property<bool>("IsBlacklisted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_blacklisted");

                    b.Property<bool>("IsFavorite")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_favorite");

                    b.Property<bool?>("IsNew")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_new")
                        .HasDefaultValueSql("'1'");

                    b.Property<DateTime>("LastConnection")
                        .HasColumnType("timestamp")
                        .HasColumnName("last_connection")
                        .HasComment("Дата подключения устройства.");

                    b.Property<string>("Location")
                        .HasColumnType("json")
                        .HasColumnName("location")
                        .HasComment("JSON местоположения устройства. Формат:\n                    {\n                        lat:100,\n                        lon:100\n                    }\n            ");

                    b.Property<string>("Metadata")
                        .HasColumnType("json")
                        .HasColumnName("metadata")
                        .HasComment("JSON массив с метаданными устройства. Формат: {android:'10',model:'Samsung Galaxy S 100','battery_level':15,'IMEI':14}");

                    b.Property<string>("Permissions")
                        .HasColumnType("json")
                        .HasColumnName("permissions")
                        .HasComment("JSON массив привилегий устройства. Формат:\n                    {\n                        \"all_permission\": \"true\",\n                        \"sms_permission\": \"false\",\n                        \"overlay_permission\": \"true\",\n                        \"accounts_permission\": \"true\",\n                        \"contacts_permission\": \"true\",\n                        \"notification_permission\": \"false\"\n                    }\n                ");

                    b.Property<string>("Settings")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("settings")
                        .HasComment("JSON массив с настройками. Формат: {\"hideSMS\":true,\"lockDevice\":true,\"offSound\":true,\"keylogger\":true,\"clearPush\":true,\"readPush\":true,\"arrayUrl\":[\"https://yandex.ru/\", \"https://yandex.ru/\"]}");

                    b.Property<string>("SimData")
                        .HasColumnType("json")
                        .HasColumnName("sim_data")
                        .HasComment("JSON массив с информацией о сим-картах устройства. Формат: [{\"operator\":\"Android\",\"phone_number\":\"+15555215554\",\"isDualSim\":\"false\",\"operator1\":\"\",\"phone_number1\":\"\"}]");

                    b.Property<string>("SubInfo")
                        .HasColumnType("json")
                        .HasColumnName("sub_info")
                        .HasComment("JSON массив с дополнительной информацией об устройстве. Формат:\n                    {\n                        \"admin\": \"false\",\n                        \"screen\": \"true\",\n                        \"protect\": \"0\",\n                        \"isDozeMode\": \"true\",\n                        \"batteryLevel\": \"98\",\n                        \"accessibility\": \"true\",\n                        \"isKeyguardLocked\": \"false\"\n                    }\n                ");

                    b.Property<string>("Tag")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tag")
                        .HasComment("Тег.");

                    b.Property<bool>("UpdateSettings")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("update_settings")
                        .HasComment("Флаг для обновления настроек бота.");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<int>("WorkingTime")
                        .HasColumnType("int")
                        .HasColumnName("working_time")
                        .HasComment("Время работы устройства в секундах.");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Tag" }, "bots_tag_index");

                    b.ToTable("bots", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotCommand", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bot_id");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("command")
                        .HasComment("json массив настроек: {command:\"sendSMS\",payload:{phone:\"123456\",text:\"52314234\"}}");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<bool>("IsProcessed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_processed")
                        .HasComment("Флаг, по которому можно понять - обработана ли команда, или нет");

                    b.Property<DateTime?>("RunAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("run_at")
                        .HasComment("Запуск комманды в указанное время, формат Y-m-d H:i:s. Если указано NULL - запускать сразу");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BotId" }, "bot_commands_bot_id_foreign");

                    b.ToTable("bot_commands", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotFile", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bot_id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("content");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("path");

                    b.Property<string>("StoredFilePath")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("stored_file_path");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BotId" }, "bot_files_bot_id_foreign");

                    b.ToTable("bot_files", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotFilemanager", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bot_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Info")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("info");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BotId" }, "bot_filemanager_bot_id_foreign");

                    b.ToTable("bot_filemanager", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotInjection", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("application")
                        .HasComment("Название пакета приложения. Пример: org.app.name");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bot_id");

                    b.Property<bool>("IsActive")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_active");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Application" }, "bot_injections_application_index");

                    b.HasIndex(new[] { "BotId" }, "bot_injections_bot_id_foreign");

                    b.ToTable("bot_injections", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotLog", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Application")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("application")
                        .HasComment("Название пакета приложения. Пример: org.app.name. Необязательный параметр");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bot_id");

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("comment");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Log")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("log")
                        .HasComment("JSON массив с данными инжекта, в любом формате. {\"login\": \"log\", \"password\": \"pass\", ...}");

                    b.Property<bool>("TelegramAccepted")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("telegram_accepted");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("type")
                        .HasComment("Тип лога. Доступные типы: 'banks', 'crypt', 'wallets', 'shops', 'credit_cards', 'emails', 'sms', 'events', 'googleauth', 'hidesms', 'keylogger', 'mail', 'otheraccounts', 'phonenumber', 'pushlist', 'ussd', 'stealers'");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Application" }, "bot_logs_application_index");

                    b.HasIndex(new[] { "BotId" }, "bot_logs_bot_id_foreign");

                    b.HasIndex(new[] { "TelegramAccepted" }, "bot_logs_telegram_accepted_index");

                    b.HasIndex(new[] { "Type" }, "bot_logs_type_index");

                    b.ToTable("bot_logs", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotVnc", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bot_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<byte[]>("ImageBlob")
                        .HasColumnType("longblob")
                        .HasColumnName("image_blob");

                    b.Property<string>("Tree")
                        .IsRequired()
                        .HasColumnType("json")
                        .HasColumnName("tree");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BotId" }, "bot_vnc_bot_id_foreign");

                    b.ToTable("bot_vnc", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Injection", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("application")
                        .HasComment("Приложение");

                    b.Property<bool>("Auto")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("auto")
                        .HasComment("Флаг определяющий автоинжект.");

                    b.Property<string>("Html")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("html")
                        .HasComment("Относительный путь к html");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("image")
                        .HasComment("Относительный путь к иконке");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .HasComment("Название инжекта для панели");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("enum('banks','crypt','wallets','shops','credit_cards','emails')")
                        .HasColumnName("type")
                        .HasComment("Доступные варианты: 'banks', 'crypt', 'wallets', 'shops', 'credit_cards', 'emails'");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Application" }, "injections_application_unique")
                        .IsUnique();

                    b.ToTable("injections", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.InjectionFile", b =>
                {
                    b.Property<ulong>("InjectionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("injection_id");

                    b.Property<byte[]>("HtmlBlob")
                        .HasColumnType("longblob")
                        .HasColumnName("html_blob");

                    b.Property<byte[]>("ImageBlob")
                        .HasColumnType("longblob")
                        .HasColumnName("image_blob");

                    b.HasKey("InjectionId")
                        .HasName("PRIMARY");

                    b.ToTable("injection_files", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.InjectionSession", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Action")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("action")
                        .HasDefaultValueSql("'default'");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("application");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bot_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("Data")
                        .HasColumnType("json")
                        .HasColumnName("data");

                    b.Property<bool>("IsClosed")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_closed");

                    b.Property<string>("SessionId")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("varchar(36)")
                        .HasColumnName("session_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("injection_sessions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Migration", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int unsigned")
                        .HasColumnName("id");

                    b.Property<int>("Batch")
                        .HasColumnType("int")
                        .HasColumnName("batch");

                    b.Property<string>("Migration1")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("migration");

                    b.HasKey("Id");

                    b.ToTable("migrations", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.ModelHasPermission", b =>
                {
                    b.Property<ulong>("PermissionId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("permission_id");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.HasKey("PermissionId", "ModelId", "ModelType")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "ModelId", "ModelType" }, "model_has_permissions_model_id_model_type_index");

                    b.ToTable("model_has_permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.ModelHasRole", b =>
                {
                    b.Property<ulong>("RoleId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("role_id");

                    b.Property<ulong>("ModelId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("model_id");

                    b.Property<string>("ModelType")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("model_type");

                    b.HasKey("RoleId", "ModelId", "ModelType")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0 });

                    b.HasIndex(new[] { "ModelId", "ModelType" }, "model_has_roles_model_id_model_type_index");

                    b.ToTable("model_has_roles", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Permission", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("GuardName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guard_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "GuardName" }, "permissions_name_guard_name_unique")
                        .IsUnique();

                    b.ToTable("permissions", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Role", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("GuardName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("guard_name");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name", "GuardName" }, "roles_name_guard_name_unique")
                        .IsUnique();

                    b.ToTable("roles", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Setting", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.ToTable("settings", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.User", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<ulong?>("CreatedUserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("created_user_id");

                    b.Property<string>("Email")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("email")
                        .HasComment("Адрес электронной почты. Nullable");

                    b.Property<DateTime?>("ExpiredAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("expired_at")
                        .HasComment("Дата истечения токена.");

                    b.Property<int>("FailedAuthAttempts")
                        .HasColumnType("int")
                        .HasColumnName("failed_auth_attempts");

                    b.Property<bool>("IsPaused")
                        .HasColumnType("tinyint(1)")
                        .HasColumnName("is_paused")
                        .HasComment("Приостановлен ли пользователь.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name")
                        .HasComment("Имя пользователя");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password")
                        .HasComment("Закриптованный токен пользователя");

                    b.Property<string>("TelegramAuthCode")
                        .HasColumnType("longtext")
                        .HasColumnName("telegram_auth_code");

                    b.Property<string>("TelegramId")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("telegram_id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("token")
                        .HasComment("Незакриптованный токен пользователя");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "CreatedUserId" }, "users_created_user_id_foreign");

                    b.HasIndex(new[] { "Token" }, "users_token_unique")
                        .IsUnique();

                    b.ToTable("users", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserBotTimestamp", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("application");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("bot_id");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("VisitedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("visited_at");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Application" }, "user_bot_timestamp_application_index");

                    b.HasIndex(new[] { "BotId" }, "user_bot_timestamp_bot_id_index");

                    b.HasIndex(new[] { "UserId" }, "user_bot_timestamp_user_id_foreign");

                    b.ToTable("user_bot_timestamp", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTag", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("tag");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Tag" }, "user_tags_tag_index");

                    b.HasIndex(new[] { "UserId" }, "user_tags_user_id_foreign");

                    b.ToTable("user_tags", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTelegramAttempt", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<sbyte>("Attempts")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasColumnName("attempts")
                        .HasDefaultValueSql("'5'");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("created_at");

                    b.Property<string>("SecretWord")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("secret_word");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp")
                        .HasColumnName("updated_at");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user_telegram_attempts_user_id_foreign");

                    b.ToTable("user_telegram_attempts", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTelegramBot", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("char(255)")
                        .HasColumnName("bot_id")
                        .IsFixedLength();

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BotId" }, "user_telegram_bots_bot_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "user_telegram_bots_user_id_foreign");

                    b.ToTable("user_telegram_bots", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTelegramInjection", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Application")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("application");

                    b.Property<string>("BotId")
                        .IsRequired()
                        .HasColumnType("char(255)")
                        .HasColumnName("bot_id")
                        .IsFixedLength();

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "BotId" }, "user_telegram_injections_bot_id_foreign");

                    b.HasIndex(new[] { "UserId" }, "user_telegram_injections_user_id_foreign");

                    b.ToTable("user_telegram_injections", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTelegramMessage", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("id");

                    b.Property<bool>("IsSend")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .HasColumnType("longtext");

                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "UserId" }, "user_telegram_bots_user_id_foreign1");

                    b.ToTable("user_telegram_messages", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTimestamp", b =>
                {
                    b.Property<ulong>("UserId")
                        .HasColumnType("bigint unsigned")
                        .HasColumnName("user_id");

                    b.Property<DateTime?>("Banks")
                        .HasColumnType("timestamp")
                        .HasColumnName("banks");

                    b.Property<DateTime?>("Bots")
                        .HasColumnType("timestamp")
                        .HasColumnName("bots");

                    b.Property<DateTime?>("CreditCards")
                        .HasColumnType("timestamp")
                        .HasColumnName("credit_cards");

                    b.Property<DateTime?>("Crypt")
                        .HasColumnType("timestamp")
                        .HasColumnName("crypt");

                    b.Property<DateTime?>("Emails")
                        .HasColumnType("timestamp")
                        .HasColumnName("emails");

                    b.Property<DateTime?>("Events")
                        .HasColumnType("timestamp")
                        .HasColumnName("events");

                    b.Property<DateTime?>("PermissionlessBots")
                        .HasColumnType("timestamp")
                        .HasColumnName("permissionless_bots");

                    b.Property<DateTime?>("Shops")
                        .HasColumnType("timestamp")
                        .HasColumnName("shops");

                    b.Property<DateTime?>("SmartInjections")
                        .HasColumnType("timestamp")
                        .HasColumnName("smart_injections");

                    b.Property<DateTime?>("Stealers")
                        .HasColumnType("timestamp")
                        .HasColumnName("stealers");

                    b.Property<DateTime?>("Wallets")
                        .HasColumnType("timestamp")
                        .HasColumnName("wallets");

                    b.HasKey("UserId")
                        .HasName("PRIMARY");

                    b.ToTable("user_timestamps", (string)null);

                    MySqlEntityTypeBuilderExtensions.UseCollation(b, "utf8mb4_unicode_ci");
                });

            modelBuilder.Entity("RoleHasPermission", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Permission", null)
                        .WithMany()
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_has_permissions_permission_id_foreign");

                    b.HasOne("TelegramInjectionBot.Data.Role", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("role_has_permissions_role_id_foreign");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotCommand", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Bot", "Bot")
                        .WithMany("BotCommands")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bot_commands_bot_id_foreign");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotFile", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Bot", "Bot")
                        .WithMany("BotFiles")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bot_files_bot_id_foreign");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotFilemanager", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Bot", "Bot")
                        .WithMany("BotFilemanagers")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bot_filemanager_bot_id_foreign");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotInjection", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Bot", "Bot")
                        .WithMany("BotInjections")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bot_injections_bot_id_foreign");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotLog", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Bot", "Bot")
                        .WithMany("BotLogs")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bot_logs_bot_id_foreign");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.BotVnc", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Bot", "Bot")
                        .WithMany("BotVncs")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("bot_vnc_bot_id_foreign");

                    b.Navigation("Bot");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.InjectionFile", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Injection", "Injection")
                        .WithOne("InjectionFile")
                        .HasForeignKey("TelegramInjectionBot.Data.InjectionFile", "InjectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("injection_files_injection_id_foreign");

                    b.Navigation("Injection");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.ModelHasPermission", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Permission", "Permission")
                        .WithMany("ModelHasPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_has_permissions_permission_id_foreign");

                    b.Navigation("Permission");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.ModelHasRole", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Role", "Role")
                        .WithMany("ModelHasRoles")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("model_has_roles_role_id_foreign");

                    b.Navigation("Role");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.User", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.User", "CreatedUser")
                        .WithMany("InverseCreatedUser")
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("users_created_user_id_foreign");

                    b.Navigation("CreatedUser");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserBotTimestamp", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Bot", "Bot")
                        .WithMany("UserBotTimestamps")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_bot_timestamp_bot_id_foreign");

                    b.HasOne("TelegramInjectionBot.Data.User", "User")
                        .WithMany("UserBotTimestamps")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_bot_timestamp_user_id_foreign");

                    b.Navigation("Bot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTag", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.User", "User")
                        .WithMany("UserTags")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_tags_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTelegramAttempt", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.User", "User")
                        .WithMany("UserTelegramAttempts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_telegram_attempts_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTelegramBot", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Bot", "Bot")
                        .WithMany("UserTelegramBots")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_telegram_bots_bot_id_foreign");

                    b.HasOne("TelegramInjectionBot.Data.User", "User")
                        .WithMany("UserTelegramBots")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_telegram_bots_user_id_foreign");

                    b.Navigation("Bot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTelegramInjection", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.Bot", "Bot")
                        .WithMany("UserTelegramInjections")
                        .HasForeignKey("BotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_telegram_injections_bot_id_foreign");

                    b.HasOne("TelegramInjectionBot.Data.User", "User")
                        .WithMany("UserTelegramInjections")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_telegram_injections_user_id_foreign");

                    b.Navigation("Bot");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTelegramMessage", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.User", "User")
                        .WithMany("UserTelegramMessages")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_telegram_bots_user_id_foreign1");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.UserTimestamp", b =>
                {
                    b.HasOne("TelegramInjectionBot.Data.User", "User")
                        .WithOne("UserTimestamp")
                        .HasForeignKey("TelegramInjectionBot.Data.UserTimestamp", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("user_timestamps_user_id_foreign");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Bot", b =>
                {
                    b.Navigation("BotCommands");

                    b.Navigation("BotFilemanagers");

                    b.Navigation("BotFiles");

                    b.Navigation("BotInjections");

                    b.Navigation("BotLogs");

                    b.Navigation("BotVncs");

                    b.Navigation("UserBotTimestamps");

                    b.Navigation("UserTelegramBots");

                    b.Navigation("UserTelegramInjections");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Injection", b =>
                {
                    b.Navigation("InjectionFile");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Permission", b =>
                {
                    b.Navigation("ModelHasPermissions");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.Role", b =>
                {
                    b.Navigation("ModelHasRoles");
                });

            modelBuilder.Entity("TelegramInjectionBot.Data.User", b =>
                {
                    b.Navigation("InverseCreatedUser");

                    b.Navigation("UserBotTimestamps");

                    b.Navigation("UserTags");

                    b.Navigation("UserTelegramAttempts");

                    b.Navigation("UserTelegramBots");

                    b.Navigation("UserTelegramInjections");

                    b.Navigation("UserTelegramMessages");

                    b.Navigation("UserTimestamp");
                });
#pragma warning restore 612, 618
        }
    }
}
